" vim: set ft=vim sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:

" Setup vundle

" vundle
" {
if isdirectory(expand('~/.vim/bundle/vundle'))
    " 确保这里的只被加载一次
    if ! IsBundled('vundle')
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()
        filetype plugin indent on

        " Use bundles config
        call TrySource("~/.vim/.vimrc.bundles")
    endif
else

    echo 'Seems you vundle is not ready!'

endif
"}

" 为检测到的插件进行相关设置

" bufferline
" {
if IsBundled('vim-bufferline')
    let g:bufferline_echo = 0
    " let g:bufferline_active_buffer_left = '['
    " let g:bufferline_active_buffer_right = ']'
    let g:bufferline_show_bufnr = 1
endif
" }

" Fugitive 
" {
if IsBundled('vim-fugitive')
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
    nnoremap <silent> <leader>gg :SignifyToggle<CR>
endif
"}

" Tabularize 
" {
if IsBundled('tabular')
    nmap <Leader>a&      :Tabularize /&<CR>
    vmap <Leader>a&      :Tabularize /&<CR>
    nmap <Leader>a=      :Tabularize /=<CR>
    vmap <Leader>a=      :Tabularize /=<CR>
    nmap <Leader>a:      :Tabularize /:<CR>
    vmap <Leader>a:      :Tabularize /:<CR>
    nmap <Leader>a::     :Tabularize /:\zs<CR>
    vmap <Leader>a::     :Tabularize /:\zs<CR>
    nmap <Leader>a,      :Tabularize /,<CR>
    vmap <Leader>a,      :Tabularize /,<CR>
    nmap <Leader>a,,     :Tabularize /,\zs<CR>
    vmap <Leader>a,,     :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar>  :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar>  :Tabularize /<Bar><CR>
endif
" }

" airline
" {
if IsBundled('vim-airline')
    let g:airline#extensions#tabline#enabled = 1
    " Use the default set of separators with a few customizations
    let g:airline_left_sep='›'  " Slightly fancier than '>'
    let g:airline_right_sep='‹' " Slightly fancier than '<'
    let g:airline#extensions#tabline#enabled = 1

    if exists('g:option_use_powerline_symbols') && has('gui_running')

        let g:airline_powerline_fonts = 1

        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif

        if g:option_use_powerline_symbols =~ 'unicode'
            " unicode symbols
            let g:airline_left_sep = '»'
            let g:airline_left_sep = '▶'
            let g:airline_right_sep = '«'
            let g:airline_right_sep = '◀'
            let g:airline_symbols.linenr = '␊'
            let g:airline_symbols.linenr = '␤'
            let g:airline_symbols.linenr = '¶'
            let g:airline_symbols.branch = '⎇'
            let g:airline_symbols.paste = 'ρ'
            let g:airline_symbols.paste = 'Þ'
            let g:airline_symbols.paste = '∥'
            let g:airline_symbols.whitespace = 'Ξ'
        endif

        if g:option_use_powerline_symbols =~ 'new'
            " powerline symbols
            let g:airline_left_sep = ''
            let g:airline_left_alt_sep = ''
            let g:airline_right_sep = ''
            let g:airline_right_alt_sep = ''
            let g:airline_symbols.branch = ''
            let g:airline_symbols.readonly = ''
            let g:airline_symbols.linenr = ''
        endif

        if g:option_use_powerline_symbols =~ 'old'
            " old vim-powerline symbols
            let g:airline_left_sep = '⮀'
            let g:airline_left_alt_sep = '⮁'
            let g:airline_right_sep = '⮂'
            let g:airline_right_alt_sep = '⮃'
            let g:airline_symbols.branch = '⭠'
            let g:airline_symbols.readonly = '⭤'
            let g:airline_symbols.linenr = '⭡'
        endif
        " Use the same setting for tabline
        let g:airline#extensions#tabline#left_sep = g:airline_left_sep
        let g:airline#extensions#tabline#left_alt_sep = g:airline_left_alt_sep
        let g:airline#extensions#tabline#right_sep = g:airline_right_sep
        let g:airline#extensions#tabline#right_alt_sep = g:airline_right_alt_sep

    endif
endif
" }

" ctrlp 
" {
if IsBundled('ctrlp')
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <silent> <D-t> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

    " On Windows use "dir" as fallback command.
    if WINDOWS()
        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    elseif executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif
    let g:ctrlp_user_command = {
                \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
                \ },
                \ 'fallback': s:ctrlp_fallback
                \ }
endif
"}

" Load local
call TrySource("~/.vim/.vimrc.plugins.local")
